/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1;

import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicTextUI;
import javax.swing.text.Highlighter;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.BadLocationException;
import java.awt.Color;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 * @author halil
 */
public class spellCheckerDesign extends javax.swing.JFrame {

    String suggestion;
    BinarySearchTree<String> matches = new BinarySearchTree<>();
    StringBuilder sb = new StringBuilder();

    /**
     * Creates new form NewJFrame
     */
    public spellCheckerDesign() {
        initComponents();

    }

    public void spellChecker(String inputWord) {
        BinarySearchTree<String> dictionary = new BinarySearchTree<>();

        dictionary.loadDictionary("src/main/java/com/mycompany/mavenproject1/output.txt");

        // System.out.println("Enter a word to check spelling:");
        // suggestion = dictionary.checkSpellingReturn(inputWord);
        matches = dictionary.findClosestMatches(inputWord);
        suggestion = matches.findMin();
        // bring the nodes which key value is up to 2

        txtArea.append("The word is misspelled. Did you mean '" + suggestion + "'?\n");
        txtArea.append("The closest matches are:\n");
        txtArea.append(matches.getNodesWithKeyUpTo(Integer.parseInt(spinner1.getValue().toString())));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_input = new javax.swing.JTextField();
        btn_clear = new javax.swing.JButton();
        btn_autocomplete = new javax.swing.JButton();
        btn_check = new javax.swing.JButton();
        spinner1 = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Spell Checker");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_inputActionPerformed(evt);
            }
        });
        txt_input.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txt_inputPropertyChange(evt);
            }
        });
        txt_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_inputKeyTyped(evt);
            }
        });
        jPanel1.add(txt_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 260, 40));

        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });
        jPanel1.add(btn_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 60, 40));

        btn_autocomplete.setText("Auto-complete");
        btn_autocomplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_autocompleteActionPerformed(evt);
            }
        });
        jPanel1.add(btn_autocomplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 120, 40));

        btn_check.setText("Check");
        btn_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_checkActionPerformed(evt);
            }
        });
        jPanel1.add(btn_check, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, 40));

        spinner1.setModel(new javax.swing.SpinnerNumberModel(4, 1, 10, 1));
        spinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner1StateChanged(evt);
            }
        });
        jPanel1.add(spinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 10, 80, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 70));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane2.setViewportView(txtArea);

        jPanel4.add(jScrollPane2);

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 700, 440));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_clearActionPerformed
        // TODO add your handling code here:

        if (txt_input.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Text area is already empty!", "Warning!", JOptionPane.WARNING_MESSAGE);
        }
        txt_input.setText("");

    }// GEN-LAST:event_btn_clearActionPerformed

    private void btn_autocompleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_autocompleteActionPerformed
        // TODO add your handling code here:
        if (txt_input.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "There is no text to auto-complete!", "Warning!",
                    JOptionPane.WARNING_MESSAGE);
        }

        JOptionPane.showMessageDialog(null, "The word will be auto-complete!", "Information",
                JOptionPane.INFORMATION_MESSAGE);
        txtArea.setText("The word is spelled correctly.");
        txt_input.setText(sb.toString().trim());
        // clear the sb
        sb.delete(0, sb.length());
        // txt_input.setText(suggestion);

    }// GEN-LAST:event_btn_autocompleteActionPerformed

    private void btn_checkActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_checkActionPerformed
        // TODO add your handling code here:

        Highlighter h = txt_input.getHighlighter();
        if (txt_input.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Text area is already empty!", "Warning!", JOptionPane.WARNING_MESSAGE);
        }
        // spellChecker(txt_input.getText());
        String text = txt_input.getText();
        String[] words = text.split("\\s+");

        for (String s : words) {
            spellChecker(s);
            sb.append(suggestion + " ");
        }
        String result = sb.toString().trim();
        txtArea.setText(result);
        if (txt_input.getText().equals(suggestion)) {
            txtArea.setText("The word is spelled correctly.");
            JOptionPane.showMessageDialog(null, "The word is spelled correctly.", "Information",
                    JOptionPane.INFORMATION_MESSAGE);

            h.removeAllHighlights();

        } else {
            try {

                // h.addHighlight(0, 4, DefaultHighlighter.DefaultPainter);//highlight first 4
                // character
                HighlightPainter red = new DefaultHighlighter.DefaultHighlightPainter(Color.red);
                h.addHighlight(0, text.length(), red);// highlight last four character
            } catch (BadLocationException ex) {
                System.err.println("Error " + ex.getMessage());
            }
        }

    }// GEN-LAST:event_btn_checkActionPerformed

    private void txt_inputActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txt_inputActionPerformed
        // TODO add your handling code here:

    }// GEN-LAST:event_txt_inputActionPerformed

    private void txt_inputKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txt_inputKeyTyped
        // TODO add your handling code here:
        Highlighter h = new BasicTextUI.BasicHighlighter();
        txt_input.setHighlighter(h);
    }// GEN-LAST:event_txt_inputKeyTyped

    private void txt_inputPropertyChange(java.beans.PropertyChangeEvent evt) {// GEN-FIRST:event_txt_inputPropertyChange
        // TODO add your handling code here:
        txtArea.setText("");
    }// GEN-LAST:event_txt_inputPropertyChange

    private void spinner1StateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_spinner1StateChanged
        // TODO add your handling code here:
        // txtArea.append(spinner1.getValue().toString());
        txtArea.append(
                matches.getNodesWithKeyUpToInitial(Integer.parseInt(spinner1.getValue().toString())).toString() + "\n");
    }// GEN-LAST:event_spinner1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(spellCheckerDesign.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(spellCheckerDesign.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(spellCheckerDesign.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(spellCheckerDesign.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new spellCheckerDesign().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_autocomplete;
    private javax.swing.JButton btn_check;
    private javax.swing.JButton btn_clear;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spinner1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txt_input;
    // End of variables declaration//GEN-END:variables
}
